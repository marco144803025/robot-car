else 
	{
		if((c&(1<<0)) && (c&(1<<7)) && (c&(1<<4)) && (c&(1<<5)) && repeat == 0) //reading all 00000000
		{
			repeat = 1;//if car left black bar 1= in black bar
			count++;
		}
		if(count == 12)
		{
			PWMmode = 17;
			count++;
		}else if(count == 5)
		{
			PWMmode = 10;
			count++;
		}
		else{
		if((!(c&(1<<0)) && !(c&(1<<1)) && !(c&(1<<2)) && !(c&(1<<3)) && !(c&(1<<4)) && !(c&(1<<5)) && !(c&(1<<6)) && !(c&(1<<7))))
		{
			PWMmode = 18;
		}else
		{
			if(!(c&(1<<7)) || !(c&(1<<0))|| !(c&(1<<4))|| !(c&(1<<5)))
			{
				repeat = 0;
			}
			if(count == 13 || count == 14)
			{
				if (c&(1<0)){
					count = 7;
				}else if (c&(1<<1)) { // Right
					PWMmode = 16;	
				}else if(c&(1<<7))			//Middle mode
				{
					PWMmode = 15;	// Left
				}else if (c&(1<<6)) {
					PWMmode = 15;	
				}else if (c&(1<<5)) {
					PWMmode = 13;	 
				}else if (c&(1<<2)) {
					PWMmode = 14;	
				}else if (c&(1<<4)) {
					PWMmode = 13;	
				}else if (c&(1<<3)) {
					PWMmode = 14;	
				}
			}else if(count == 6)
			{
				if(c&(1<<7))			//Middle mode
				{
					PWMmode = 15;	// Left
				}else if (c&(1<0)){
					count = 7;
				}else if (c&(1<<6)) {
					PWMmode = 15;	
				}else if (c&(1<<1)) { // Right
					PWMmode = 16;	
				}else if (c&(1<<5)) {
					PWMmode = 13;	 
				}else if (c&(1<<2)) {
					PWMmode = 14;	
				}else if (c&(1<<4)) {
					PWMmode = 13;	
				}else if (c&(1<<3)) {
					PWMmode = 14;	
				}
			}else if(count == 2|| count == 1 || count == 4 || count == 9 || count == 11) //Slow mode
			{
				
				if(c&(1<<5))
			{
				PWMmode = 11;
			}else if (c&(1<<4)){
				PWMmode = 11;	// normal Left
			}else if (c&(1<<7)) {
				PWMmode = 8;	// 
			}else if (c&(1<<6)) {
				PWMmode = 8;	// 
			}else if (c&(1<<3)) {
				PWMmode = 12;	// 
			}else if (c&(1<<2)) {
				PWMmode = 12;	//
			}else if (c&(1<<1)) {
				PWMmode = 7;	// hard Right
			}else if (c&(1<<0)) {
				PWMmode = 7;	// Hard right
			}
			}
			else{ 
			if(c&(1<<7))			//Normal mode
			{
				PWMmode = 6;	// Hard Left
			}else if (c&(1<<6)){
				PWMmode = 6;	// Left
			}else if (c&(1<<5)) {
				PWMmode = 4;	// 
			}else if (c&(1<<4)) {
				PWMmode = 4;	// 
			}else if (c&(1<<3)) {
				PWMmode = 5;	// 
			}else if (c&(1<<2)) {
				PWMmode = 5;	//
			}else if (c&(1<<1)) {
				PWMmode = 7;	// Right
			}else if (c&(1<<0)) {
				PWMmode = 7;	// Hard right
			}
		}
	}
}
	
	
	{
	if(c&(1<<0))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}
	if(c&(1<<1))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<2))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<3))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<4))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<5))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<6))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
	if(c&(1<<7))
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'0');
	}
	else
	{
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);	
	USART_SendData(USART2,'1');
	}	
		
//	while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
//	USART_SendData(USART2, c);
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
	USART_SendData(USART2, '\r');
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
	USART_SendData(USART2, '\n');
	}
	
	// Check PA7. If it is 1, it means the data is ready
	
	  // disable the interrupt because it is not ready
	  NVIC_DisableIRQ(SPI1_IRQn);
		
		
	}